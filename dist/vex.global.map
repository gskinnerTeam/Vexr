{"version":3,"names":[],"mappings":"","sources":["vex.global.js"],"sourcesContent":["(function (exports) {\n'use strict';\n\nvar asyncGenerator = function () {\n  function AwaitValue(value) {\n    this.value = value;\n  }\n\n  function AsyncGenerator(gen) {\n    var front, back;\n\n    function send(key, arg) {\n      return new Promise(function (resolve, reject) {\n        var request = {\n          key: key,\n          arg: arg,\n          resolve: resolve,\n          reject: reject,\n          next: null\n        };\n\n        if (back) {\n          back = back.next = request;\n        } else {\n          front = back = request;\n          resume(key, arg);\n        }\n      });\n    }\n\n    function resume(key, arg) {\n      try {\n        var result = gen[key](arg);\n        var value = result.value;\n\n        if (value instanceof AwaitValue) {\n          Promise.resolve(value.value).then(function (arg) {\n            resume(\"next\", arg);\n          }, function (arg) {\n            resume(\"throw\", arg);\n          });\n        } else {\n          settle(result.done ? \"return\" : \"normal\", result.value);\n        }\n      } catch (err) {\n        settle(\"throw\", err);\n      }\n    }\n\n    function settle(type, value) {\n      switch (type) {\n        case \"return\":\n          front.resolve({\n            value: value,\n            done: true\n          });\n          break;\n\n        case \"throw\":\n          front.reject(value);\n          break;\n\n        default:\n          front.resolve({\n            value: value,\n            done: false\n          });\n          break;\n      }\n\n      front = front.next;\n\n      if (front) {\n        resume(front.key, front.arg);\n      } else {\n        back = null;\n      }\n    }\n\n    this._invoke = send;\n\n    if (typeof gen.return !== \"function\") {\n      this.return = undefined;\n    }\n  }\n\n  if (typeof Symbol === \"function\" && Symbol.asyncIterator) {\n    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {\n      return this;\n    };\n  }\n\n  AsyncGenerator.prototype.next = function (arg) {\n    return this._invoke(\"next\", arg);\n  };\n\n  AsyncGenerator.prototype.throw = function (arg) {\n    return this._invoke(\"throw\", arg);\n  };\n\n  AsyncGenerator.prototype.return = function (arg) {\n    return this._invoke(\"return\", arg);\n  };\n\n  return {\n    wrap: function (fn) {\n      return function () {\n        return new AsyncGenerator(fn.apply(this, arguments));\n      };\n    },\n    await: function (value) {\n      return new AwaitValue(value);\n    }\n  };\n}();\n\n\n\n\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\n\n\nvar get$1 = function get$1(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get$1(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar set$1 = function set$1(object, property, value, receiver) {\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent !== null) {\n      set$1(parent, property, value, receiver);\n    }\n  } else if (\"value\" in desc && desc.writable) {\n    desc.value = value;\n  } else {\n    var setter = desc.set;\n\n    if (setter !== undefined) {\n      setter.call(receiver, value);\n    }\n  }\n\n  return value;\n};\n\nvar Vector2 = function () {\n\tcreateClass(Vector2, null, [{\n\t\tkey: \"angleBetween\",\n\t\tvalue: function angleBetween(a, b) {\n\t\t\treturn Math.atan2(b.y - a.y, b.x - a.x);\n\t\t}\n\t}, {\n\t\tkey: \"lerp\",\n\t\tvalue: function lerp(a, b, t) {\n\t\t\tvar x = a.x + t * (b.x - a.x);\n\t\t\tvar y = a.y + t * (b.y - a.y);\n\t\t\treturn new Vector2(x, y);\n\t\t}\n\t}, {\n\t\tkey: \"map\",\n\t\tvalue: function map(value, bottomA, topA, bottomB, topB) {\n\t\t\treturn bottomB + (topB - bottomB) * (value - bottomA) / (topA - bottomA);\n\t\t}\n\t}, {\n\t\tkey: \"normalize\",\n\t\tvalue: function normalize(vector) {\n\t\t\tvar vec = vector.get();\n\t\t\treturn vec.normalize();\n\t\t}\n\t}, {\n\t\tkey: \"radiansToDegrees\",\n\t\tvalue: function radiansToDegrees(radians) {\n\t\t\treturn radians * (180 / Math.PI);\n\t\t}\n\t}, {\n\t\tkey: \"degreesToRadians\",\n\t\tvalue: function degreesToRadians(degrees) {\n\t\t\treturn degrees * (Math.PI / 180);\n\t\t}\n\t}, {\n\t\tkey: \"add\",\n\t\tvalue: function add(a, b) {\n\t\t\treturn new Vector2(a.x + b.x, a.y + b.y);\n\t\t}\n\t}, {\n\t\tkey: \"subtract\",\n\t\tvalue: function subtract(a, b) {\n\t\t\tvar n = new Vector2(b.x, b.y);\n\t\t\tn.negate();\n\t\t\treturn Vector2.add(a, n);\n\t\t}\n\t}, {\n\t\tkey: \"multiply\",\n\t\tvalue: function multiply(a, scalar) {\n\t\t\treturn new Vector2(a.x * scalar, a.y * scalar);\n\t\t}\n\t}, {\n\t\tkey: \"divide\",\n\t\tvalue: function divide(a, scalar) {\n\t\t\tscalar = 1 / scalar;\n\t\t\treturn Vector2.multiply(a, scalar);\n\t\t}\n\t}, {\n\t\tkey: \"dot\",\n\t\tvalue: function dot(a, b) {\n\t\t\treturn a.x * b.x + a.y * b.y;\n\t\t}\n\t}, {\n\t\tkey: \"dist\",\n\t\tvalue: function dist(a, b) {\n\t\t\tvar vec1 = a.x - b.x;\n\t\t\tvar vec2 = a.y - b.y;\n\t\t\treturn Math.sqrt(vec1 * vec1 + vec2 * vec2);\n\t\t}\n\t}]);\n\n\tfunction Vector2() {\n\t\tvar x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\t\tvar y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\t\tclassCallCheck(this, Vector2);\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\tcreateClass(Vector2, [{\n\t\tkey: \"get\",\n\t\tvalue: function get() {\n\t\t\treturn new Vector2(this.x, this.y);\n\t\t}\n\t}, {\n\t\tkey: \"set\",\n\t\tvalue: function set(x, y) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\t}, {\n\t\tkey: \"multiply\",\n\t\tvalue: function multiply(scalar) {\n\t\t\tthis.x = this.x * scalar;\n\t\t\tthis.y = this.y * scalar;\n\t\t}\n\t}, {\n\t\tkey: \"add\",\n\t\tvalue: function add(v) {\n\t\t\tthis.x = this.x + v.x;\n\t\t\tthis.y = this.y + v.y;\n\t\t}\n\t}, {\n\t\tkey: \"subtract\",\n\t\tvalue: function subtract(v) {\n\t\t\tvar n = new Vector2(v.x, v.y);\n\t\t\tn.negate();\n\t\t\tthis.add(n);\n\t\t}\n\t}, {\n\t\tkey: \"divide\",\n\t\tvalue: function divide(scalar) {\n\t\t\tscalar = 1 / scalar;\n\t\t\tthis.multiply(scalar);\n\t\t}\n\t}, {\n\t\tkey: \"negate\",\n\t\tvalue: function negate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t}\n\t}, {\n\t\tkey: \"clamp\",\n\t\tvalue: function clamp(limit) {\n\t\t\tif (this.x > limit) {\n\t\t\t\tthis.x = limit;\n\t\t\t} else if (this.x < 0 && this.x < limit) {\n\t\t\t\tthis.x = -limit;\n\t\t\t}\n\t\t\tif (this.y > limit) {\n\t\t\t\tthis.y = limit;\n\t\t\t} else if (this.y < 0 && this.y < limit) {\n\t\t\t\tthis.y = -limit;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"limit\",\n\t\tvalue: function limit(_limit) {\n\t\t\tif (this.magnitude() > _limit) {\n\t\t\t\tthis.normalize();\n\t\t\t\tthis.multiply(_limit);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"rotate\",\n\t\tvalue: function rotate(degrees) {\n\t\t\tvar rads = Vector2.degreesToRadians(degrees);\n\t\t\tvar cosineAngle = Math.cos(rads);\n\t\t\tvar sineAngle = Math.sin(rads);\n\t\t\tthis.x = cosineAngle * this.x - sineAngle * this.y;\n\t\t\tthis.y = sineAngle * this.x + cosineAngle * this.y;\n\t\t}\n\t}, {\n\t\tkey: \"magnitude\",\n\t\tvalue: function magnitude() {\n\t\t\treturn Math.sqrt(Vector2.dot(this, this));\n\t\t}\n\t}, {\n\t\tkey: \"normalize\",\n\t\tvalue: function normalize() {\n\t\t\tvar m = this.magnitude();\n\t\t\tif (m > 0) {\n\t\t\t\tthis.divide(m);\n\t\t\t}\n\t\t}\n\t}]);\n\treturn Vector2;\n}();\n\n// export Behaviors from \"./Behaviors\";\n\nexports.Vector2 = Vector2;\n\n}((this.Vex = this.Vex || {})));\n"],"file":"vex.global.js"}