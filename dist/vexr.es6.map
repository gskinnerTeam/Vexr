{"version":3,"names":[],"mappings":"","sources":["vexr.es6.js"],"sourcesContent":["class Vector2 {\r\n\r\n\tstatic angleBetween(a, b) {\r\n\t\tvar mag = a.magnitude() * b.magnitude();\r\n\t\tvar dot = Vector2.dot(a, b);\r\n\t\treturn Math.acos(dot / mag);\r\n\t}\r\n\r\n\tstatic lerp(a, b, t) {\r\n\t\tvar x = a.x + t * (b.x - a.x);\r\n\t\tvar y = a.y + t * (b.y - a.y);\r\n\t\treturn new Vector2(x, y);\r\n\t}\r\n\r\n\tstatic map(value, bottomA, topA, bottomB, topB) {\r\n\t\treturn bottomB + (topB - bottomB) * (value - bottomA) / (topA - bottomA);\r\n\t}\r\n\r\n\tstatic normalize(vector) {\r\n\t\tvar vec = vector.get();\r\n\t\tvec.normalize();\r\n\t\treturn vec;\r\n\t}\r\n\r\n\tstatic magnitude(vec) {\r\n\t\t\treturn Math.sqrt(Vector2.dot(vec, vec));\r\n\t}\r\n\r\n\tstatic radiansToDegrees(radians) {\r\n\t\treturn radians * (180 / Math.PI);\r\n\t}\r\n\r\n\tstatic degreesToRadians(degrees) {\r\n\t\treturn degrees * (Math.PI / 180);\r\n\t}\r\n\r\n\tstatic add(a, b) {\r\n\t\treturn new Vector2((a.x + b.x), (a.y + b.y));\r\n\t}\r\n\r\n\tstatic subtract(a, b) {\r\n\t\tvar n = new Vector2(b.x, b.y);\r\n\t\tn.negate();\r\n\t\treturn Vector2.add(a, n);\r\n\t}\r\n\r\n\tstatic multiply(a, scalar) {\r\n\t\treturn new Vector2(a.x * scalar, a.y * scalar);\r\n\t}\r\n\r\n\tstatic divide(a, scalar) {\r\n\t\tscalar = 1 / scalar;\r\n\t\treturn Vector2.multiply(a, scalar);\r\n\t}\r\n\r\n\tstatic dot(a, b) {\r\n\t\treturn a.x * b.x + a.y * b.y;\r\n\t}\r\n\r\n\tstatic dist(a, b) {\r\n\t\tvar vec1 = a.x - b.x;\r\n\t\tvar vec2 = a.y - b.y;\r\n\t\treturn Math.sqrt((vec1 * vec1) + (vec2 * vec2));\r\n\t}\r\n\r\n\tconstructor(x = 0, y = 0) {\r\n\t\tthis.raw = [x,y];\r\n\t}\r\n\r\n\tget x () {\r\n\t\treturn this.raw[0];\r\n\t}\r\n\r\n\tset x (value) {\r\n\t\tthis.raw[0] = value;\r\n\t}\r\n\r\n\tget y () {\r\n\t\treturn this.raw[1];\r\n\t}\r\n\r\n\tset y (value) {\r\n\t\tthis.raw[1] = value;\r\n\t}\r\n\r\n\tget() {\r\n\t\treturn new Vector2(this.x, this.y);\r\n\t}\r\n\r\n\tset(x, y) {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t}\r\n\r\n\tmultiply(scalar) {\r\n\t\tthis.x = this.x * scalar;\r\n\t\tthis.y = this.y * scalar;\r\n\t}\r\n\r\n\tadd(v) {\r\n\t\tthis.x = this.x + v.x;\r\n\t\tthis.y = this.y + v.y;\r\n\t}\r\n\r\n\tsubtract(v) {\r\n\t\tvar n = new Vector2(v.x, v.y);\r\n\t\tn.negate();\r\n\t\tthis.add(n);\r\n\t}\r\n\r\n\tdivide(scalar) {\r\n\t\tscalar = 1 / scalar;\r\n\t\tthis.multiply(scalar);\r\n\t}\r\n\r\n\tnegate() {\r\n\t\tthis.x = -this.x;\r\n\t\tthis.y = -this.y;\r\n\t}\r\n\r\n\tclamp(limit) {\r\n\t\tif (this.x > limit) {\r\n\t\t\tthis.x = limit;\r\n\t\t} else if (this.x < 0 && this.x < limit) {\r\n\t\t\tthis.x = -limit;\r\n\t\t}\r\n\t\tif (this.y > limit) {\r\n\t\t\tthis.y = limit;\r\n\t\t} else if (this.y < 0 && this.y < limit) {\r\n\t\t\tthis.y = -limit;\r\n\t\t}\r\n\t}\r\n\r\n\tlimit(limit) {\r\n\t\tif (this.magnitude() > limit) {\r\n\t\t\tthis.normalize();\r\n\t\t\tthis.multiply(limit);\r\n\t\t}\r\n\t}\r\n\r\n\trotate(degrees, pivotVector = new Vector2(0, 0), stabilize = false) {\r\n\t\tvar mag = this.magnitude();\r\n\t\tvar rads = Vector2.degreesToRadians(degrees);\r\n\t\tvar cosineAngle = Math.cos(rads);\r\n\t\tvar sineAngle = Math.sin(rads);\r\n\t\tthis.x = (cosineAngle * (this.x - pivotVector.x)) + (sineAngle * (this.y - pivotVector.y)) + pivotVector.x;\r\n\t\tthis.y = (cosineAngle * (this.y - pivotVector.y)) - (sineAngle * (this.x - pivotVector.x)) + pivotVector.y;\r\n\t\tif (stabilize) {\r\n\t\t\tthis.normalize();\r\n\t\t\tthis.multiply(mag);\r\n\t\t}\r\n\t}\r\n\r\n\tmagnitude() {\r\n\t\treturn Math.sqrt(Vector2.dot(this, this));\r\n\t}\r\n\r\n\tnormalize() {\r\n\t\tvar m = this.magnitude();\r\n\t\tif (m > 0) {\r\n\t\t\tthis.divide(m);\r\n\t\t}\r\n\t}\r\n\r\n}\n\nclass Vector3 {\r\n\r\n\tstatic angleBetween(a, b) {\r\n\t\tvar mag = a.magnitude() * b.magnitude();\r\n\t\tvar dot = Vector3.dot(a, b);\r\n\t\treturn Math.acos(dot / mag);\r\n\t}\r\n\r\n\tstatic lerp(a, b, t) {\r\n\t\tvar x = a.x + t * (b.x - a.x);\r\n\t\tvar y = a.y + t * (b.y - a.y);\r\n\t\tvar z = a.z + t * (b.z - a.z);\r\n\t\treturn new Vector3(x, y, z);\r\n\t}\r\n\r\n\tstatic map(value, bottomA, topA, bottomB, topB) {\r\n\t\treturn bottomB + (topB - bottomB) * (value - bottomA) / (topA - bottomA);\r\n\t}\r\n\r\n\tstatic normalize(vector) {\r\n\t\tvar vec = vector.get();\r\n\t\tvec.normalize();\r\n\t\treturn vec;\r\n\t}\r\n\r\n\tstatic magnitude(vector) {\r\n\t\treturn Math.sqrt(Vector3.dot(vector, vector));\r\n\t}\r\n\r\n\tstatic radiansToDegrees(radians) {\r\n\t\treturn radians * (180 / Math.PI);\r\n\t}\r\n\r\n\tstatic degreesToRadians(degrees) {\r\n\t\treturn degrees * (Math.PI / 180);\r\n\t}\r\n\r\n\tstatic add(a, b) {\r\n\t\treturn new Vector3(a.x + b.x, a.y + b.y, a.z + b.z);\r\n\t}\r\n\r\n\tstatic subtract(a, b) {\r\n\t\tvar n = new Vector3(b.x, b.y, b.z);\r\n\t\tn.negate();\r\n\t\treturn Vector3.add(a, n);\r\n\t}\r\n\r\n\tstatic multiply(a, scalar) {\r\n\t\treturn new Vector3(a.x * scalar, a.y * scalar, a.z * scalar);\r\n\t}\r\n\r\n\tstatic divide(a, scalar) {\r\n\t\tscalar = 1 / scalar;\r\n\t\treturn Vector3.multiply(a, scalar);\r\n\t}\r\n\r\n\tstatic dot(a, b) {\r\n\t\treturn a.x * b.x + a.y * b.y + a.z * b.z;\r\n\t}\r\n\r\n\tstatic cross(a, b) {\r\n\t\tvar x = a.y * b.z - b.y * a.z;\r\n\t\tvar y = a.z * b.x - b.z * a.x;\r\n\t\tvar z = a.x * b.y - b.x * a.y;\r\n\t\treturn new Vector3(x, y, z);\r\n\t}\r\n\r\n\r\n\tstatic dist(a, b) {\r\n\t\tvar vec1 = a.x - b.x;\r\n\t\tvar vec2 = a.y - b.y;\r\n\t\tvar vec3 = a.z - b.z;\r\n\t\treturn Math.sqrt((vec1 * vec1) + (vec2 * vec2) + (vec3 * vec3));\r\n\t}\r\n\r\n\tconstructor(x = 0, y = 0, z = 0) {\r\n\t\tthis.raw = [x,y,z];\r\n\t}\r\n\r\n\tget x () {\r\n\t\treturn this.raw[0];\r\n\t}\r\n\r\n\tset x (value) {\r\n\t\tthis.raw[0] = value;\r\n\t}\r\n\r\n\tget y () {\r\n\t\treturn this.raw[1];\r\n\t}\r\n\r\n\tset y (value) {\r\n\t\tthis.raw[1] = value;\r\n\t}\r\n\r\n\tget z () {\r\n\t\treturn this.raw[2];\r\n\t}\r\n\r\n\tset z (value) {\r\n\t\tthis.raw[2] = value;\r\n\t}\r\n\r\n\tget() {\r\n\t\treturn new Vector3(this.x, this.y, this.z);\r\n\t}\r\n\r\n\tset(x, y, z) {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\t}\r\n\r\n\tmultiply(scalar) {\r\n\t\tthis.x = this.x * scalar;\r\n\t\tthis.y = this.y * scalar;\r\n\t\tthis.z = this.z* scalar;\r\n\t}\r\n\r\n\tadd(v) {\r\n\t\tthis.x = this.x + v.x;\r\n\t\tthis.y = this.y + v.y;\r\n\t\tthis.z = this.z + v.z;\r\n\t}\r\n\r\n\tsubtract(v) {\r\n\t\tvar n = new Vector3(v.x, v.y, v.z);\r\n\t\tn.negate();\r\n\t\tthis.add(n);\r\n\t}\r\n\r\n\tdivide(scalar) {\r\n\t\tscalar = 1 / scalar;\r\n\t\tthis.multiply(scalar);\r\n\t}\r\n\r\n\tnegate() {\r\n\t\tthis.x = -this.x;\r\n\t\tthis.y = -this.y;\r\n\t\tthis.z = -this.z;\r\n\t}\r\n\r\n\tclamp(limit) {\r\n\t\tif (this.x > limit) {\r\n\t\t\tthis.x = limit;\r\n\t\t} else if (this.x < 0 && this.x < limit) {\r\n\t\t\tthis.x = -limit;\r\n\t\t}\r\n\t\tif (this.y > limit) {\r\n\t\t\tthis.y = limit;\r\n\t\t} else if (this.y < 0 && this.y < limit) {\r\n\t\t\tthis.y = -limit;\r\n\t\t}\r\n\t\tif (this.z > limit) {\r\n\t\t\tthis.z = limit;\r\n\t\t} else if (this.z < 0 && this.z < limit) {\r\n\t\t\tthis.z = -limit;\r\n\t\t}\r\n\t}\r\n\r\n\tlimit(limit) {\r\n\t\tif (this.magnitude() > limit) {\r\n\t\t\tthis.normalize();\r\n\t\t\tthis.multiply(limit);\r\n\t\t}\r\n\t}\r\n\r\n\trotate(degrees, pivotVector = new Vector3(0, 0), stabilize = false) {\r\n\t\tvar mag = this.magnitude();\r\n\t\tvar rads = Vector3.degreesToRadians(degrees);\r\n\t\tvar cosineAngle = Math.cos(rads);\r\n\t\tvar sineAngle = Math.sin(rads);\r\n\t\tthis.x = (cosineAngle * (this.x - pivotVector.x)) + (sineAngle * (this.y - pivotVector.y)) + pivotVector.x;\r\n\t\tthis.y = (cosineAngle * (this.y - pivotVector.y)) - (sineAngle * (this.x - pivotVector.x)) + pivotVector.y;\r\n\t\tif (stabilize) {\r\n\t\t\tthis.normalize();\r\n\t\t\tthis.multiply(mag);\r\n\t\t}\r\n\t}\r\n\r\n\tmagnitude() {\r\n\t\treturn Math.sqrt(Vector3.dot(this, this));\r\n\t}\r\n\r\n\tnormalize() {\r\n\t\tvar m = this.magnitude();\r\n\t\tif (m > 0) {\r\n\t\t\tthis.divide(m);\r\n\t\t}\r\n\t}\r\n\r\n}\n\nclass Matrix3 {\r\n\r\n\tconstructor (array = [1,0,0,0,1,0,0,0,1]) {\r\n\t\tthis.raw = new Float32Array(array);\r\n\t}\r\n\r\n\tsetMatrix (array) {\r\n\t\tthis.raw = array;\r\n\t}\r\n\r\n\tstatic dot (a,b) {\r\n\t\tvar dots = a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n\t\tconsole.log(dots);\r\n\t\treturn dots;\r\n\t}\r\n\r\n\tstatic multiply(a,b) {\r\n\t\tvar matrix = new Float32Array(9);\r\n\t\tmatrix[0] = Matrix3.dot(a.column1, b.row1);\r\n\t\tmatrix[1] = Matrix3.dot(a.column2, b.row1);\r\n\t\tmatrix[2] = Matrix3.dot(a.column3, b.row1);\r\n\t\tmatrix[3] = Matrix3.dot(a.column1, b.row2);\r\n\t\tmatrix[4] = Matrix3.dot(a.column2, b.row2);\r\n\t\tmatrix[5] = Matrix3.dot(a.column3, b.row2);\r\n\t\tmatrix[6] = Matrix3.dot(a.column1, b.row3);\r\n\t\tmatrix[7] = Matrix3.dot(a.column2, b.row3);\r\n\t\tmatrix[8] = Matrix3.dot(a.column3, b.row3);\r\n\t\tvar newMatrix = new Matrix3();\r\n\t\tnewMatrix.setMatrix(matrix);\r\n\t\treturn newMatrix;\r\n\t}\r\n\r\n\tmultiply(matrix) {\r\n\t\tvar newMatrix = Matrix3.multiply(this, matrix);\r\n\t\tthis.raw = newMatrix.raw;\r\n\t}\r\n\r\n\tget column1 () {\r\n\t\treturn [this.raw[0], this.raw[3], this.raw[6]];\r\n\t}\r\n\tget column2 () {\r\n\t\treturn [this.raw[1], this.raw[4], this.raw[7]];\r\n\t}\r\n\tget column3 () {\r\n\t\treturn [this.raw[2], this.raw[5], this.raw[8]];\r\n\t}\r\n\tget row1 () {\r\n\t\treturn [this.raw[0], this.raw[1], this.raw[2]];\r\n\t}\r\n\tget row2 () {\r\n\t\treturn [this.raw[3], this.raw[4], this.raw[5]];\r\n\t}\r\n\tget row3 () {\r\n\t\treturn [this.raw[6], this.raw[7], this.raw[8]];\r\n\t}\r\n\tset column1 (array) {\r\n\t\tthis.raw[0] = array[0];\r\n\t\tthis.raw[3] = array[1];\r\n\t\tthis.raw[6] = array[2];\r\n\t}\r\n\tset column2 (array) {\r\n\t\tthis.raw[1] = array[0];\r\n\t\tthis.raw[4] = array[1];\r\n\t\tthis.raw[7] = array[2];\r\n\t}\r\n\tset column3 (array) {\r\n\t\tthis.raw[2] = array[0];\r\n\t\tthis.raw[5] = array[1];\r\n\t\tthis.raw[68] = array[2];\r\n\t}\r\n\tset row1 (array) {\r\n\t\tthis.raw[0] = array[0];\r\n\t\tthis.raw[1] = array[1];\r\n\t\tthis.raw[2] = array[2];\r\n\t}\r\n\tset row2 (array) {\r\n\t\tthis.raw[3] = array[0];\r\n\t\tthis.raw[4] = array[1];\r\n\t\tthis.raw[5] = array[2];\r\n\t}\r\n\tset row3 (array) {\r\n\t\tthis.raw[6] = array[0];\r\n\t\tthis.raw[7] = array[1];\r\n\t\tthis.raw[8] = array[2];\r\n\t}\r\n\r\n}\n\nclass Matrix4 {\r\n\r\n    constructor (array = new Float32Array([1,0,0,0,\r\n        0,1,0,0,\r\n        0,0,1,0,\r\n        0,0,0,1])) {\r\n        this.setMatrix(array);\r\n    }\r\n\r\n    setMatrix (array) {\r\n        this.raw = array;\r\n    }\r\n\r\n    static dot (c1, c2, c3, c4, r1, r2, r3, r4) {\r\n        return c1 * r1 + c2 * r2 + c3 * r3 + c4 * r4;\r\n    }\r\n\r\n    transpose () {\r\n        var row1 = [this.raw[0], this.raw[1], this.raw[2], this.raw[3]];\r\n        var row2 = [this.raw[4], this.raw[5], this.raw[6], this.raw[7]];\r\n        var row3 = [this.raw[8], this.raw[9], this.raw[10], this.raw[11]];\r\n        var row4 = [this.raw[12], this.raw[13], this.raw[14], this.raw[15]];\r\n\r\n        this.raw[0]  = row1[0];\r\n        this.raw[4]  = row1[1];\r\n        this.raw[8]  = row1[2];\r\n        this.raw[12] = row1[3];\r\n\r\n        this.raw[1]  = row2[0];\r\n        this.raw[5]  = row2[1];\r\n        this.raw[9]  = row2[2];\r\n        this.raw[13] = row2[3];\r\n\r\n        this.raw[2]  = row3[0];\r\n        this.raw[6]  = row3[1];\r\n        this.raw[10] = row3[2];\r\n        this.raw[14] = row3[3];\r\n\r\n        this.raw[3]  = row4[0];\r\n        this.raw[7]  = row4[1];\r\n        this.raw[11] = row4[2];\r\n        this.raw[15] = row4[3];\r\n\r\n    }\r\n    \r\n    static multiply(a,b, outputMatrix = new Matrix4()) {\r\n        let matrix = new Float32Array(16);\r\n        //let matrix = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];\r\n        matrix[0] = Matrix4.dot(a.raw[0], a.raw[4], a.raw[8], a.raw[12], b.raw[0], b.raw[1], b.raw[2], b.raw[3]);\r\n        matrix[1] = Matrix4.dot(a.raw[1], a.raw[5], a.raw[9], a.raw[13], b.raw[0], b.raw[1], b.raw[2], b.raw[3]);\r\n        matrix[2] = Matrix4.dot(a.raw[2], a.raw[6], a.raw[10], a.raw[14], b.raw[0], b.raw[1], b.raw[2], b.raw[3]);\r\n        matrix[3] = Matrix4.dot(a.raw[3], a.raw[7], a.raw[11], a.raw[15], b.raw[0], b.raw[1], b.raw[2], b.raw[3]);\r\n\r\n        matrix[4] = Matrix4.dot(a.raw[0], a.raw[4], a.raw[8], a.raw[12], b.raw[4], b.raw[5], b.raw[6], b.raw[7]);\r\n        matrix[5] = Matrix4.dot(a.raw[1], a.raw[5], a.raw[9], a.raw[13], b.raw[4], b.raw[5], b.raw[6], b.raw[7]);\r\n        matrix[6] = Matrix4.dot(a.raw[2], a.raw[6], a.raw[10], a.raw[14], b.raw[4], b.raw[5], b.raw[6], b.raw[7]);\r\n        matrix[7] = Matrix4.dot(a.raw[3], a.raw[7], a.raw[11], a.raw[15], b.raw[4], b.raw[5], b.raw[6], b.raw[7]);\r\n\r\n        matrix[8] = Matrix4.dot(a.raw[0], a.raw[4], a.raw[8], a.raw[12], b.raw[8], b.raw[9], b.raw[10], b.raw[11]);\r\n        matrix[9] = Matrix4.dot(a.raw[1], a.raw[5], a.raw[9], a.raw[13], b.raw[8], b.raw[9], b.raw[10], b.raw[11]);\r\n        matrix[10] = Matrix4.dot(a.raw[2], a.raw[6], a.raw[10], a.raw[14], b.raw[8], b.raw[9], b.raw[10], b.raw[11]);\r\n        matrix[11] = Matrix4.dot(a.raw[3], a.raw[7], a.raw[11], a.raw[15], b.raw[8], b.raw[9], b.raw[10], b.raw[11]);\r\n\r\n        matrix[12] = Matrix4.dot(a.raw[0], a.raw[4], a.raw[8], a.raw[12], b.raw[12], b.raw[13], b.raw[14], b.raw[15]);\r\n        matrix[13] = Matrix4.dot(a.raw[1], a.raw[5], a.raw[9], a.raw[13], b.raw[12], b.raw[13], b.raw[14], b.raw[15]);\r\n        matrix[14] = Matrix4.dot(a.raw[2], a.raw[6], a.raw[10], a.raw[14], b.raw[12], b.raw[13], b.raw[14], b.raw[15]);\r\n        matrix[15] = Matrix4.dot(a.raw[3], a.raw[7], a.raw[11], a.raw[15], b.raw[12], b.raw[13], b.raw[14], b.raw[15]);\r\n        //console.log(outputMatrix);\r\n        outputMatrix.setMatrix(matrix);\r\n        return outputMatrix;\r\n    }\r\n\r\n    multiply(matrix) {\r\n        Matrix4.multiply(this, matrix, this);\r\n    }\r\n\r\n}\n\n// export Behaviors from \"./Behaviors\";\n\nexport { Vector2, Vector3, Matrix3, Matrix4 };\n"],"file":"vexr.es6.js"}