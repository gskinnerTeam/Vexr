{"version":3,"names":[],"mappings":"","sources":["vexr.js"],"sourcesContent":["(function (exports) {\n'use strict';\n\nvar asyncGenerator = function () {\n  function AwaitValue(value) {\n    this.value = value;\n  }\n\n  function AsyncGenerator(gen) {\n    var front, back;\n\n    function send(key, arg) {\n      return new Promise(function (resolve, reject) {\n        var request = {\n          key: key,\n          arg: arg,\n          resolve: resolve,\n          reject: reject,\n          next: null\n        };\n\n        if (back) {\n          back = back.next = request;\n        } else {\n          front = back = request;\n          resume(key, arg);\n        }\n      });\n    }\n\n    function resume(key, arg) {\n      try {\n        var result = gen[key](arg);\n        var value = result.value;\n\n        if (value instanceof AwaitValue) {\n          Promise.resolve(value.value).then(function (arg) {\n            resume(\"next\", arg);\n          }, function (arg) {\n            resume(\"throw\", arg);\n          });\n        } else {\n          settle(result.done ? \"return\" : \"normal\", result.value);\n        }\n      } catch (err) {\n        settle(\"throw\", err);\n      }\n    }\n\n    function settle(type, value) {\n      switch (type) {\n        case \"return\":\n          front.resolve({\n            value: value,\n            done: true\n          });\n          break;\n\n        case \"throw\":\n          front.reject(value);\n          break;\n\n        default:\n          front.resolve({\n            value: value,\n            done: false\n          });\n          break;\n      }\n\n      front = front.next;\n\n      if (front) {\n        resume(front.key, front.arg);\n      } else {\n        back = null;\n      }\n    }\n\n    this._invoke = send;\n\n    if (typeof gen.return !== \"function\") {\n      this.return = undefined;\n    }\n  }\n\n  if (typeof Symbol === \"function\" && Symbol.asyncIterator) {\n    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {\n      return this;\n    };\n  }\n\n  AsyncGenerator.prototype.next = function (arg) {\n    return this._invoke(\"next\", arg);\n  };\n\n  AsyncGenerator.prototype.throw = function (arg) {\n    return this._invoke(\"throw\", arg);\n  };\n\n  AsyncGenerator.prototype.return = function (arg) {\n    return this._invoke(\"return\", arg);\n  };\n\n  return {\n    wrap: function (fn) {\n      return function () {\n        return new AsyncGenerator(fn.apply(this, arguments));\n      };\n    },\n    await: function (value) {\n      return new AwaitValue(value);\n    }\n  };\n}();\n\n\n\n\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\n\n\nvar get$1 = function get$1(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get$1(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\n\n\nvar set$1 = function set$1(object, property, value, receiver) {\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent !== null) {\n      set$1(parent, property, value, receiver);\n    }\n  } else if (\"value\" in desc && desc.writable) {\n    desc.value = value;\n  } else {\n    var setter = desc.set;\n\n    if (setter !== undefined) {\n      setter.call(receiver, value);\n    }\n  }\n\n  return value;\n};\n\nvar Convert = function () {\n    function Convert() {\n        classCallCheck(this, Convert);\n    }\n\n    createClass(Convert, null, [{\n        key: \"RadiansToDegrees\",\n        value: function RadiansToDegrees(radians) {\n            return radians * (180 / Math.PI);\n        }\n    }, {\n        key: \"DegreesToRadians\",\n        value: function DegreesToRadians(degrees) {\n            return degrees * (Math.PI / 180);\n        }\n    }, {\n        key: \"MapRange\",\n        value: function MapRange(value, bottomA, topA, bottomB, topB) {\n            return bottomB + (topB - bottomB) * (value - bottomA) / (topA - bottomA);\n        }\n    }]);\n    return Convert;\n}();\n\nvar Vector2 = function () {\n\tcreateClass(Vector2, null, [{\n\t\tkey: \"angleBetween\",\n\t\tvalue: function angleBetween(a, b) {\n\t\t\tvar mag = a.magnitude() * b.magnitude();\n\t\t\tvar dot = Vector2.dot(a, b);\n\t\t\treturn Math.acos(dot / mag);\n\t\t}\n\t}, {\n\t\tkey: \"lerp\",\n\t\tvalue: function lerp(a, b, t) {\n\t\t\tvar x = a.x + t * (b.x - a.x);\n\t\t\tvar y = a.y + t * (b.y - a.y);\n\t\t\treturn new Vector2(x, y);\n\t\t}\n\t}, {\n\t\tkey: \"normalize\",\n\t\tvalue: function normalize(vector) {\n\t\t\tvar vec = vector.get();\n\t\t\tvec.normalize();\n\t\t\treturn vec;\n\t\t}\n\t}, {\n\t\tkey: \"magnitude\",\n\t\tvalue: function magnitude(vec) {\n\t\t\treturn Math.sqrt(Vector2.dot(vec, vec));\n\t\t}\n\t}, {\n\t\tkey: \"add\",\n\t\tvalue: function add(a, b) {\n\t\t\treturn new Vector2(a.x + b.x, a.y + b.y);\n\t\t}\n\t}, {\n\t\tkey: \"subtract\",\n\t\tvalue: function subtract(a, b) {\n\t\t\tvar n = new Vector2(b.x, b.y);\n\t\t\tn.negate();\n\t\t\treturn Vector2.add(a, n);\n\t\t}\n\t}, {\n\t\tkey: \"multiply\",\n\t\tvalue: function multiply(a, scalar) {\n\t\t\treturn new Vector2(a.x * scalar, a.y * scalar);\n\t\t}\n\t}, {\n\t\tkey: \"divide\",\n\t\tvalue: function divide(a, scalar) {\n\t\t\tscalar = 1 / scalar;\n\t\t\treturn Vector2.multiply(a, scalar);\n\t\t}\n\t}, {\n\t\tkey: \"dot\",\n\t\tvalue: function dot(a, b) {\n\t\t\treturn a.x * b.x + a.y * b.y;\n\t\t}\n\t}, {\n\t\tkey: \"dist\",\n\t\tvalue: function dist(a, b) {\n\t\t\tvar vec1 = a.x - b.x;\n\t\t\tvar vec2 = a.y - b.y;\n\t\t\treturn Math.sqrt(vec1 * vec1 + vec2 * vec2);\n\t\t}\n\t}]);\n\n\tfunction Vector2() {\n\t\tvar x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\t\tvar y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\t\tclassCallCheck(this, Vector2);\n\n\t\tthis.raw = [x, y];\n\t}\n\n\tcreateClass(Vector2, [{\n\t\tkey: \"get\",\n\t\tvalue: function get() {\n\t\t\treturn new Vector2(this.x, this.y);\n\t\t}\n\t}, {\n\t\tkey: \"set\",\n\t\tvalue: function set() {\n\t\t\tvar x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\t\t\tvar y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\t}, {\n\t\tkey: \"multiply\",\n\t\tvalue: function multiply(scalar) {\n\t\t\tthis.x = this.x * scalar;\n\t\t\tthis.y = this.y * scalar;\n\t\t}\n\t}, {\n\t\tkey: \"add\",\n\t\tvalue: function add(v) {\n\t\t\tthis.x = this.x + v.x;\n\t\t\tthis.y = this.y + v.y;\n\t\t}\n\t}, {\n\t\tkey: \"subtract\",\n\t\tvalue: function subtract(v) {\n\t\t\tvar n = new Vector2(v.x, v.y);\n\t\t\tn.negate();\n\t\t\tthis.add(n);\n\t\t}\n\t}, {\n\t\tkey: \"divide\",\n\t\tvalue: function divide(scalar) {\n\t\t\tscalar = 1 / scalar;\n\t\t\tthis.multiply(scalar);\n\t\t}\n\t}, {\n\t\tkey: \"negate\",\n\t\tvalue: function negate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t}\n\t}, {\n\t\tkey: \"clamp\",\n\t\tvalue: function clamp(limit) {\n\t\t\tif (this.x > limit) {\n\t\t\t\tthis.x = limit;\n\t\t\t} else if (this.x < 0 && this.x < limit) {\n\t\t\t\tthis.x = -limit;\n\t\t\t}\n\t\t\tif (this.y > limit) {\n\t\t\t\tthis.y = limit;\n\t\t\t} else if (this.y < 0 && this.y < limit) {\n\t\t\t\tthis.y = -limit;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"limit\",\n\t\tvalue: function limit(_limit) {\n\t\t\tif (this.magnitude() > _limit) {\n\t\t\t\tthis.normalize();\n\t\t\t\tthis.multiply(_limit);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"rotate\",\n\t\tvalue: function rotate(degrees) {\n\t\t\tvar pivotVector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2(0, 0);\n\t\t\tvar stabilize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n\t\t\tvar mag = this.magnitude();\n\t\t\tvar rads = Convert.degreesToRadians(degrees);\n\t\t\tvar cosineAngle = Math.cos(rads);\n\t\t\tvar sineAngle = Math.sin(rads);\n\t\t\tthis.x = cosineAngle * (this.x - pivotVector.x) + sineAngle * (this.y - pivotVector.y) + pivotVector.x;\n\t\t\tthis.y = cosineAngle * (this.y - pivotVector.y) - sineAngle * (this.x - pivotVector.x) + pivotVector.y;\n\t\t\tif (stabilize) {\n\t\t\t\tthis.normalize();\n\t\t\t\tthis.multiply(mag);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"magnitude\",\n\t\tvalue: function magnitude() {\n\t\t\treturn Math.sqrt(Vector2.dot(this, this));\n\t\t}\n\t}, {\n\t\tkey: \"normalize\",\n\t\tvalue: function normalize() {\n\t\t\tvar m = this.magnitude();\n\t\t\tif (m > 0) {\n\t\t\t\tthis.divide(m);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"x\",\n\t\tget: function get() {\n\t\t\treturn this.raw[0];\n\t\t},\n\t\tset: function set(value) {\n\t\t\tthis.raw[0] = value;\n\t\t}\n\t}, {\n\t\tkey: \"y\",\n\t\tget: function get() {\n\t\t\treturn this.raw[1];\n\t\t},\n\t\tset: function set(value) {\n\t\t\tthis.raw[1] = value;\n\t\t}\n\t}, {\n\t\tkey: \"z\",\n\t\tget: function get() {\n\t\t\treturn 0;\n\t\t}\n\t}]);\n\treturn Vector2;\n}();\n\nvar Vector3 = function () {\n\tcreateClass(Vector3, null, [{\n\t\tkey: \"angleBetween\",\n\t\tvalue: function angleBetween(a, b) {\n\t\t\tvar mag = a.magnitude() * b.magnitude();\n\t\t\tvar dot = Vector3.dot(a, b);\n\t\t\treturn Math.acos(dot / mag);\n\t\t}\n\t}, {\n\t\tkey: \"lerp\",\n\t\tvalue: function lerp(a, b, t) {\n\t\t\tvar x = a.x + t * (b.x - a.x);\n\t\t\tvar y = a.y + t * (b.y - a.y);\n\t\t\tvar z = a.z + t * (b.z - a.z);\n\t\t\treturn new Vector3(x, y, z);\n\t\t}\n\t}, {\n\t\tkey: \"normalize\",\n\t\tvalue: function normalize(vector) {\n\t\t\tvar vec = vector.get();\n\t\t\tvec.normalize();\n\t\t\treturn vec;\n\t\t}\n\t}, {\n\t\tkey: \"magnitude\",\n\t\tvalue: function magnitude(vector) {\n\t\t\treturn Math.sqrt(Vector3.dot(vector, vector));\n\t\t}\n\t}, {\n\t\tkey: \"add\",\n\t\tvalue: function add(a, b) {\n\t\t\treturn new Vector3(a.x + b.x, a.y + b.y, a.z + b.z);\n\t\t}\n\t}, {\n\t\tkey: \"subtract\",\n\t\tvalue: function subtract(a, b) {\n\t\t\tvar n = new Vector3(b.x, b.y, b.z);\n\t\t\tn.negate();\n\t\t\treturn Vector3.add(a, n);\n\t\t}\n\t}, {\n\t\tkey: \"multiply\",\n\t\tvalue: function multiply(a, scalar) {\n\t\t\treturn new Vector3(a.x * scalar, a.y * scalar, a.z * scalar);\n\t\t}\n\t}, {\n\t\tkey: \"divide\",\n\t\tvalue: function divide(a, scalar) {\n\t\t\tscalar = 1 / scalar;\n\t\t\treturn Vector3.multiply(a, scalar);\n\t\t}\n\t}, {\n\t\tkey: \"dot\",\n\t\tvalue: function dot(a, b) {\n\t\t\treturn a.x * b.x + a.y * b.y + a.z * b.z;\n\t\t}\n\t}, {\n\t\tkey: \"cross\",\n\t\tvalue: function cross(a, b) {\n\t\t\tvar x = a.y * b.z - b.y * a.z;\n\t\t\tvar y = a.z * b.x - b.z * a.x;\n\t\t\tvar z = a.x * b.y - b.x * a.y;\n\t\t\treturn new Vector3(x, y, z);\n\t\t}\n\t}, {\n\t\tkey: \"dist\",\n\t\tvalue: function dist(a, b) {\n\t\t\tvar vec1 = a.x - b.x;\n\t\t\tvar vec2 = a.y - b.y;\n\t\t\tvar vec3 = a.z - b.z;\n\t\t\treturn Math.sqrt(vec1 * vec1 + vec2 * vec2 + vec3 * vec3);\n\t\t}\n\t}]);\n\n\tfunction Vector3() {\n\t\tvar x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\t\tvar y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\t\tvar z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\t\tclassCallCheck(this, Vector3);\n\n\t\tthis.raw = [x, y, z];\n\t}\n\n\tcreateClass(Vector3, [{\n\t\tkey: \"get\",\n\t\tvalue: function get() {\n\t\t\treturn new Vector3(this.x, this.y, this.z);\n\t\t}\n\t}, {\n\t\tkey: \"set\",\n\t\tvalue: function set() {\n\t\t\tvar x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\t\t\tvar y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\t\t\tvar z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t}\n\t}, {\n\t\tkey: \"multiply\",\n\t\tvalue: function multiply(scalar) {\n\t\t\tthis.x = this.x * scalar;\n\t\t\tthis.y = this.y * scalar;\n\t\t\tthis.z = this.z * scalar;\n\t\t}\n\t}, {\n\t\tkey: \"add\",\n\t\tvalue: function add(v) {\n\t\t\tthis.x = this.x + v.x;\n\t\t\tthis.y = this.y + v.y;\n\t\t\tthis.z = this.z + v.z;\n\t\t}\n\t}, {\n\t\tkey: \"subtract\",\n\t\tvalue: function subtract(v) {\n\t\t\tvar n = new Vector3(v.x, v.y, v.z);\n\t\t\tn.negate();\n\t\t\tthis.add(n);\n\t\t}\n\t}, {\n\t\tkey: \"divide\",\n\t\tvalue: function divide(scalar) {\n\t\t\tscalar = 1 / scalar;\n\t\t\tthis.multiply(scalar);\n\t\t}\n\t}, {\n\t\tkey: \"negate\",\n\t\tvalue: function negate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\tthis.z = -this.z;\n\t\t}\n\t}, {\n\t\tkey: \"clamp\",\n\t\tvalue: function clamp(limit) {\n\t\t\tif (this.x > limit) {\n\t\t\t\tthis.x = limit;\n\t\t\t} else if (this.x < 0 && this.x < limit) {\n\t\t\t\tthis.x = -limit;\n\t\t\t}\n\t\t\tif (this.y > limit) {\n\t\t\t\tthis.y = limit;\n\t\t\t} else if (this.y < 0 && this.y < limit) {\n\t\t\t\tthis.y = -limit;\n\t\t\t}\n\t\t\tif (this.z > limit) {\n\t\t\t\tthis.z = limit;\n\t\t\t} else if (this.z < 0 && this.z < limit) {\n\t\t\t\tthis.z = -limit;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"limit\",\n\t\tvalue: function limit(_limit) {\n\t\t\tif (this.magnitude() > _limit) {\n\t\t\t\tthis.normalize();\n\t\t\t\tthis.multiply(_limit);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"rotate\",\n\t\tvalue: function rotate(degrees) {\n\t\t\tvar pivotVector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n\t\t\tvar stabilize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n\t\t\tvar mag = this.magnitude();\n\t\t\tvar rads = Convert.degreesToRadians(degrees);\n\t\t\tvar cosineAngle = Math.cos(rads);\n\t\t\tvar sineAngle = Math.sin(rads);\n\t\t\tthis.x = cosineAngle * (this.x - pivotVector.x) + sineAngle * (this.y - pivotVector.y) + pivotVector.x;\n\t\t\tthis.y = cosineAngle * (this.y - pivotVector.y) - sineAngle * (this.x - pivotVector.x) + pivotVector.y;\n\t\t\tif (stabilize) {\n\t\t\t\tthis.normalize();\n\t\t\t\tthis.multiply(mag);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"magnitude\",\n\t\tvalue: function magnitude() {\n\t\t\treturn Math.sqrt(Vector3.dot(this, this));\n\t\t}\n\t}, {\n\t\tkey: \"normalize\",\n\t\tvalue: function normalize() {\n\t\t\tvar m = this.magnitude();\n\t\t\tif (m > 0) {\n\t\t\t\tthis.divide(m);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"x\",\n\t\tget: function get() {\n\t\t\treturn this.raw[0];\n\t\t},\n\t\tset: function set(value) {\n\t\t\tthis.raw[0] = value;\n\t\t}\n\t}, {\n\t\tkey: \"y\",\n\t\tget: function get() {\n\t\t\treturn this.raw[1];\n\t\t},\n\t\tset: function set(value) {\n\t\t\tthis.raw[1] = value;\n\t\t}\n\t}, {\n\t\tkey: \"z\",\n\t\tget: function get() {\n\t\t\treturn this.raw[2];\n\t\t},\n\t\tset: function set(value) {\n\t\t\tthis.raw[2] = value;\n\t\t}\n\t}]);\n\treturn Vector3;\n}();\n\nvar Matrix3 = function () {\n\tfunction Matrix3() {\n\t\tvar array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\t\tclassCallCheck(this, Matrix3);\n\n\t\tthis.raw = new Float32Array(array);\n\t}\n\n\tcreateClass(Matrix3, [{\n\t\tkey: \"setMatrix\",\n\t\tvalue: function setMatrix(array) {\n\t\t\tthis.raw = array;\n\t\t}\n\t}, {\n\t\tkey: \"multiply\",\n\t\tvalue: function multiply(matrix) {\n\t\t\tvar newMatrix = Matrix3.multiply(this, matrix);\n\t\t\tthis.raw = newMatrix.raw;\n\t\t}\n\t}, {\n\t\tkey: \"column1\",\n\t\tget: function get() {\n\t\t\treturn [this.raw[0], this.raw[3], this.raw[6]];\n\t\t},\n\t\tset: function set(array) {\n\t\t\tthis.raw[0] = array[0];\n\t\t\tthis.raw[3] = array[1];\n\t\t\tthis.raw[6] = array[2];\n\t\t}\n\t}, {\n\t\tkey: \"column2\",\n\t\tget: function get() {\n\t\t\treturn [this.raw[1], this.raw[4], this.raw[7]];\n\t\t},\n\t\tset: function set(array) {\n\t\t\tthis.raw[1] = array[0];\n\t\t\tthis.raw[4] = array[1];\n\t\t\tthis.raw[7] = array[2];\n\t\t}\n\t}, {\n\t\tkey: \"column3\",\n\t\tget: function get() {\n\t\t\treturn [this.raw[2], this.raw[5], this.raw[8]];\n\t\t},\n\t\tset: function set(array) {\n\t\t\tthis.raw[2] = array[0];\n\t\t\tthis.raw[5] = array[1];\n\t\t\tthis.raw[68] = array[2];\n\t\t}\n\t}, {\n\t\tkey: \"row1\",\n\t\tget: function get() {\n\t\t\treturn [this.raw[0], this.raw[1], this.raw[2]];\n\t\t},\n\t\tset: function set(array) {\n\t\t\tthis.raw[0] = array[0];\n\t\t\tthis.raw[1] = array[1];\n\t\t\tthis.raw[2] = array[2];\n\t\t}\n\t}, {\n\t\tkey: \"row2\",\n\t\tget: function get() {\n\t\t\treturn [this.raw[3], this.raw[4], this.raw[5]];\n\t\t},\n\t\tset: function set(array) {\n\t\t\tthis.raw[3] = array[0];\n\t\t\tthis.raw[4] = array[1];\n\t\t\tthis.raw[5] = array[2];\n\t\t}\n\t}, {\n\t\tkey: \"row3\",\n\t\tget: function get() {\n\t\t\treturn [this.raw[6], this.raw[7], this.raw[8]];\n\t\t},\n\t\tset: function set(array) {\n\t\t\tthis.raw[6] = array[0];\n\t\t\tthis.raw[7] = array[1];\n\t\t\tthis.raw[8] = array[2];\n\t\t}\n\t}], [{\n\t\tkey: \"dot\",\n\t\tvalue: function dot(a, b) {\n\t\t\tvar dots = a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n\t\t\tconsole.log(dots);\n\t\t\treturn dots;\n\t\t}\n\t}, {\n\t\tkey: \"multiply\",\n\t\tvalue: function multiply(a, b) {\n\t\t\tvar matrix = new Float32Array(9);\n\t\t\tmatrix[0] = Matrix3.dot(a.column1, b.row1);\n\t\t\tmatrix[1] = Matrix3.dot(a.column2, b.row1);\n\t\t\tmatrix[2] = Matrix3.dot(a.column3, b.row1);\n\t\t\tmatrix[3] = Matrix3.dot(a.column1, b.row2);\n\t\t\tmatrix[4] = Matrix3.dot(a.column2, b.row2);\n\t\t\tmatrix[5] = Matrix3.dot(a.column3, b.row2);\n\t\t\tmatrix[6] = Matrix3.dot(a.column1, b.row3);\n\t\t\tmatrix[7] = Matrix3.dot(a.column2, b.row3);\n\t\t\tmatrix[8] = Matrix3.dot(a.column3, b.row3);\n\t\t\tvar newMatrix = new Matrix3();\n\t\t\tnewMatrix.setMatrix(matrix);\n\t\t\treturn newMatrix;\n\t\t}\n\t}]);\n\treturn Matrix3;\n}();\n\nvar Matrix4 = function () {\n    function Matrix4() {\n        var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n        classCallCheck(this, Matrix4);\n\n        this.setMatrix(array);\n    }\n\n    createClass(Matrix4, [{\n        key: \"setMatrix\",\n        value: function setMatrix(array) {\n            this.raw = array;\n        }\n    }, {\n        key: \"transpose\",\n        value: function transpose() {\n            var row1 = [this.raw[0], this.raw[1], this.raw[2], this.raw[3]];\n            var row2 = [this.raw[4], this.raw[5], this.raw[6], this.raw[7]];\n            var row3 = [this.raw[8], this.raw[9], this.raw[10], this.raw[11]];\n            var row4 = [this.raw[12], this.raw[13], this.raw[14], this.raw[15]];\n\n            this.raw[0] = row1[0];\n            this.raw[4] = row1[1];\n            this.raw[8] = row1[2];\n            this.raw[12] = row1[3];\n\n            this.raw[1] = row2[0];\n            this.raw[5] = row2[1];\n            this.raw[9] = row2[2];\n            this.raw[13] = row2[3];\n\n            this.raw[2] = row3[0];\n            this.raw[6] = row3[1];\n            this.raw[10] = row3[2];\n            this.raw[14] = row3[3];\n\n            this.raw[3] = row4[0];\n            this.raw[7] = row4[1];\n            this.raw[11] = row4[2];\n            this.raw[15] = row4[3];\n        }\n    }, {\n        key: \"multiply\",\n        value: function multiply(matrix) {\n            Matrix4.multiply(this, matrix, this);\n        }\n    }], [{\n        key: \"dot\",\n        value: function dot(c1, c2, c3, c4, r1, r2, r3, r4) {\n            return c1 * r1 + c2 * r2 + c3 * r3 + c4 * r4;\n        }\n    }, {\n        key: \"multiply\",\n        value: function multiply(a, b) {\n            var outputMatrix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Matrix4();\n\n            var matrix = new Float32Array(16);\n            //let matrix = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];\n            matrix[0] = Matrix4.dot(a.raw[0], a.raw[4], a.raw[8], a.raw[12], b.raw[0], b.raw[1], b.raw[2], b.raw[3]);\n            matrix[1] = Matrix4.dot(a.raw[1], a.raw[5], a.raw[9], a.raw[13], b.raw[0], b.raw[1], b.raw[2], b.raw[3]);\n            matrix[2] = Matrix4.dot(a.raw[2], a.raw[6], a.raw[10], a.raw[14], b.raw[0], b.raw[1], b.raw[2], b.raw[3]);\n            matrix[3] = Matrix4.dot(a.raw[3], a.raw[7], a.raw[11], a.raw[15], b.raw[0], b.raw[1], b.raw[2], b.raw[3]);\n\n            matrix[4] = Matrix4.dot(a.raw[0], a.raw[4], a.raw[8], a.raw[12], b.raw[4], b.raw[5], b.raw[6], b.raw[7]);\n            matrix[5] = Matrix4.dot(a.raw[1], a.raw[5], a.raw[9], a.raw[13], b.raw[4], b.raw[5], b.raw[6], b.raw[7]);\n            matrix[6] = Matrix4.dot(a.raw[2], a.raw[6], a.raw[10], a.raw[14], b.raw[4], b.raw[5], b.raw[6], b.raw[7]);\n            matrix[7] = Matrix4.dot(a.raw[3], a.raw[7], a.raw[11], a.raw[15], b.raw[4], b.raw[5], b.raw[6], b.raw[7]);\n\n            matrix[8] = Matrix4.dot(a.raw[0], a.raw[4], a.raw[8], a.raw[12], b.raw[8], b.raw[9], b.raw[10], b.raw[11]);\n            matrix[9] = Matrix4.dot(a.raw[1], a.raw[5], a.raw[9], a.raw[13], b.raw[8], b.raw[9], b.raw[10], b.raw[11]);\n            matrix[10] = Matrix4.dot(a.raw[2], a.raw[6], a.raw[10], a.raw[14], b.raw[8], b.raw[9], b.raw[10], b.raw[11]);\n            matrix[11] = Matrix4.dot(a.raw[3], a.raw[7], a.raw[11], a.raw[15], b.raw[8], b.raw[9], b.raw[10], b.raw[11]);\n\n            matrix[12] = Matrix4.dot(a.raw[0], a.raw[4], a.raw[8], a.raw[12], b.raw[12], b.raw[13], b.raw[14], b.raw[15]);\n            matrix[13] = Matrix4.dot(a.raw[1], a.raw[5], a.raw[9], a.raw[13], b.raw[12], b.raw[13], b.raw[14], b.raw[15]);\n            matrix[14] = Matrix4.dot(a.raw[2], a.raw[6], a.raw[10], a.raw[14], b.raw[12], b.raw[13], b.raw[14], b.raw[15]);\n            matrix[15] = Matrix4.dot(a.raw[3], a.raw[7], a.raw[11], a.raw[15], b.raw[12], b.raw[13], b.raw[14], b.raw[15]);\n            //console.log(outputMatrix);\n            outputMatrix.setMatrix(matrix);\n            return outputMatrix;\n        }\n    }]);\n    return Matrix4;\n}();\n\nvar Behavior = function () {\n\tfunction Behavior() {\n\t\tclassCallCheck(this, Behavior);\n\t}\n\n\tcreateClass(Behavior, null, [{\n\t\tkey: \"seek\",\n\t\tvalue: function seek(actor, targetPosition) {\n\t\t\tvar desired = Vector3.subtract(targetPosition, actor.location);\n\t\t\tdesired.normalize();\n\t\t\tdesired.multiply(actor.maxSpeed);\n\t\t\tvar steer = Vector3.subtract(desired, actor.velocity);\n\t\t\tsteer.limit(actor.maxForce);\n\t\t\treturn steer;\n\t\t}\n\t}, {\n\t\tkey: \"arrive\",\n\t\tvalue: function arrive(actor, target) {\n\t\t\tvar power = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50;\n\n\n\t\t\tvar desired = Vector3.subtract(target, actor.location);\n\t\t\tvar dMag = desired.magnitude();\n\t\t\tdesired.normalize();\n\t\t\tvar mappedPower = Convert.MapRange(dMag, 0, power, 0, actor.maxSpeed);\n\n\t\t\tdesired.multiply(mappedPower);\n\n\t\t\tvar steer = Vector3.subtract(desired, actor.velocity);\n\t\t\tsteer.limit(actor.maxForce);\n\n\t\t\treturn steer;\n\t\t}\n\t}, {\n\t\tkey: \"avoidAll\",\n\t\tvalue: function avoidAll(actor, obstacles) {\n\t\t\tvar avoidRadius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 80;\n\n\t\t\tvar avoidRadius = avoidRadius;\n\t\t\tvar total = new Vector3(0, 0);\n\t\t\tvar count = 0;\n\t\t\tfor (var o = 0; o < obstacles.length; o++) {\n\t\t\t\tvar obstacle = obstacles[o];\n\t\t\t\tvar distance = Vector3.dist(actor.location, obstacle.location);\n\t\t\t\tif (distance > 0 && distance < avoidRadius && actor.id != obstacle.id) {\n\t\t\t\t\tvar difference = Vector3.subtract(actor.location, obstacle.location, obstacle.id);\n\t\t\t\t\tdifference.normalize();\n\t\t\t\t\tdifference.divide(distance);\n\t\t\t\t\ttotal.add(difference);\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (count > 0) {\n\t\t\t\ttotal.divide(count);\n\t\t\t\ttotal.normalize();\n\t\t\t\ttotal.multiply(actor.maxSpeed);\n\n\t\t\t\tvar steer = Vector3.subtract(total, actor.velocity);\n\t\t\t\tsteer.limit(actor.maxForce);\n\n\t\t\t\treturn steer;\n\t\t\t} else {\n\t\t\t\treturn new Vector3(0, 0, 0);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"avoid\",\n\t\tvalue: function avoid(actor, target, avoidRadius) {\n\t\t\tthis.avoidAll(actor, [target], avoidRadius);\n\t\t}\n\t}, {\n\t\tkey: \"constrain\",\n\t\tvalue: function constrain(actor, minWidth, minHeight, maxWidth, maxHeight) {\n\t\t\tvar margin = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n\t\t\tminWidth -= margin;\n\t\t\tmaxWidth += margin;\n\t\t\tminHeight -= margin;\n\t\t\tmaxHeight += margin;\n\n\t\t\tif (actor.location.x < minWidth) {\n\t\t\t\tactor.velocity.x *= -1;\n\t\t\t\tactor.location.x = minWidth;\n\t\t\t}\n\t\t\tif (actor.location.y < minHeight) {\n\t\t\t\tactor.velocity.y *= -1;\n\t\t\t\tactor.location.y = minHeight;\n\t\t\t}\n\t\t\tif (actor.location.x > maxWidth) {\n\n\t\t\t\tactor.velocity.x *= -1;\n\t\t\t\tactor.location.x = maxWidth;\n\t\t\t}\n\t\t\tif (actor.location.y > maxHeight) {\n\t\t\t\tactor.velocity.y *= -1;\n\t\t\t\tactor.location.y = maxHeight;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"wrap\",\n\t\tvalue: function wrap(actor, minWidth, minHeight, maxWidth, maxHeight) {\n\t\t\tvar margin = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n\t\t\tminWidth -= margin;\n\t\t\tmaxWidth += margin;\n\t\t\tminHeight -= margin;\n\t\t\tmaxHeight += margin;\n\n\t\t\tif (actor.location.x < minWidth) {\n\t\t\t\tactor.location.x = maxWidth;\n\t\t\t}\n\t\t\tif (actor.location.y < minHeight) {\n\t\t\t\tactor.location.y = maxHeight;\n\t\t\t}\n\t\t\tif (actor.location.x > maxWidth) {\n\t\t\t\tactor.location.x = minWidth;\n\t\t\t}\n\t\t\tif (actor.location.y > maxHeight) {\n\t\t\t\tactor.location.y = minHeight;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"disableOutside\",\n\t\tvalue: function disableOutside(actor, minWidth, minHeight, maxWidth, maxHeight) {\n\t\t\tvar margin = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n\t\t\tminWidth -= margin;\n\t\t\tmaxWidth += margin;\n\t\t\tminHeight -= margin;\n\t\t\tmaxHeight += margin;\n\n\t\t\tif (actor.location.x < minWidth || actor.location.y < minHeight || actor.location.x > maxWidth || actor.location.y > maxHeight) {\n\t\t\t\tactor.active = false;\n\t\t\t\tactor.visible = false;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"destroyOutside\",\n\t\tvalue: function destroyOutside(actor, minWidth, minHeight, maxWidth, maxHeight) {\n\t\t\tvar margin = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n\t\t\tminWidth -= margin;\n\t\t\tmaxWidth += margin;\n\t\t\tminHeight -= margin;\n\t\t\tmaxHeight += margin;\n\t\t\tif (actor.location.x < minWidth || actor.location.y < minHeight || actor.location.x > maxWidth || actor.location.y > maxHeight) {\n\t\t\t\tactor.dead = true;\n\t\t\t}\n\t\t}\n\t}]);\n\treturn Behavior;\n}();\n\nvar hexString = \"0123456789abcdef\";\n\nvar Generate = function () {\n    function Generate() {\n        classCallCheck(this, Generate);\n    }\n\n    createClass(Generate, null, [{\n        key: \"randomHexString\",\n        value: function randomHexString(length) {\n            var bytes = \"\";\n            for (var i = 0; i < length; i++) {\n                bytes += hexString.substr(Math.floor(Math.random() * hexString.length), 1);\n            }\n            return bytes;\n        }\n    }, {\n        key: \"UUID\",\n        value: function UUID() {\n            return Generate.randomHexString(7) + \"-\" + Generate.randomHexString(4) + \"-\" + Generate.randomHexString(4) + \"-\" + Generate.randomHexString(4) + \"-\" + Generate.randomHexString(4) + \"-\" + Generate.randomHexString(12);\n        }\n    }]);\n    return Generate;\n}();\n\nvar Actor = function () {\n\tfunction Actor(className) {\n\t\tvar location = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3(0, 0, 0);\n\t\tclassCallCheck(this, Actor);\n\n\t\tthis.type = className;\n\t\tthis.active = true;\n\t\tthis.visible = true;\n\t\tthis.dead = false;\n\t\tthis.id = Generate.UUID();\n\t\tthis.location = location;\n\t\tthis.velocity = new Vector3(0, 0, 0);\n\t\tthis.acceleration = new Vector3(0, 0, 0);\n\t\tthis.angle = 0;\n\t\tthis.maxSpeed = 15;\n\t\tthis.maxForce = 1;\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\t}\n\n\tcreateClass(Actor, [{\n\t\tkey: \"addForce\",\n\t\tvalue: function addForce(vector) {\n\t\t\tthis.acceleration.add(vector);\n\t\t}\n\t}, {\n\t\tkey: \"update\",\n\t\tvalue: function update() {\n\t\t\tif (this.active) {\n\t\t\t\tthis.move();\n\t\t\t\tthis.velocity.add(this.acceleration);\n\t\t\t\tthis.location.add(this.velocity);\n\t\t\t\tthis.acceleration.set(0, 0, 0);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"move\",\n\t\tvalue: function move() {}\n\t}, {\n\t\tkey: \"render\",\n\t\tvalue: function render() {\n\t\t\tif (this.visible) {\n\t\t\t\tthis.draw();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"draw\",\n\t\tvalue: function draw() {\n\t\t\t// override this function win your drawing code\n\t\t}\n\t}, {\n\t\tkey: \"destroy\",\n\t\tvalue: function destroy() {\n\t\t\tthis.dead = true;\n\t\t\tfor (var i = 0; i < this.children.length; i++) {\n\t\t\t\tthis.children[i].destroy();\n\t\t\t}\n\t\t}\n\t}]);\n\treturn Actor;\n}();\n\nvar DOMActor = function (_Actor) {\n\tinherits(DOMActor, _Actor);\n\n\tfunction DOMActor(className, location) {\n\t\tclassCallCheck(this, DOMActor);\n\n\t\tvar _this = possibleConstructorReturn(this, (DOMActor.__proto__ || Object.getPrototypeOf(DOMActor)).call(this, className, location));\n\n\t\t_this.element = document.createElement(\"div\");\n\t\t_this.element.classList.add(\"actor\");\n\t\t_this.element.classList.add(className);\n\t\t_this.parentElement = null;\n\t\treturn _this;\n\t}\n\n\tcreateClass(DOMActor, [{\n\t\tkey: \"addToParentElement\",\n\t\tvalue: function addToParentElement(parentElement) {\n\t\t\tthis.parentElement = parentElement;\n\t\t\tthis.parentElement.appendChild(this.element);\n\t\t}\n\t}, {\n\t\tkey: \"draw\",\n\t\tvalue: function draw() {\n\t\t\tthis.element.style.transform = \"translateX(\" + this.location.x + \"px) translateY(\" + this.location.y + \"px) rotate(\" + this.angle + \"deg)\";\n\t\t}\n\t}, {\n\t\tkey: \"destroy\",\n\t\tvalue: function destroy() {\n\t\t\tthis.dead = true;\n\t\t\tthis.element.remove();\n\t\t\tthis.parentElement = null;\n\t\t}\n\t}]);\n\treturn DOMActor;\n}(Actor);\n\nvar GameLoop = function () {\n\tfunction GameLoop() {\n\t\tclassCallCheck(this, GameLoop);\n\n\t\tthis.gameObjects = [];\n\t\tthis.controller = [];\n\t}\n\n\tcreateClass(GameLoop, [{\n\t\tkey: \"setController\",\n\t\tvalue: function setController(inputController) {\n\t\t\tthis.controller.push(inputController);\n\t\t}\n\t}, {\n\t\tkey: \"getType\",\n\t\tvalue: function getType(type) {\n\t\t\tvar matches = [];\n\t\t\tfor (var i = 0; i < this.gameObjects.length; i++) {\n\t\t\t\tif (this.gameObjects[i].type === type) {\n\t\t\t\t\tmatches.push(this.gameObjects[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn matches;\n\t\t}\n\t}, {\n\t\tkey: \"update\",\n\t\tvalue: function update() {\n\t\t\tthis.removeActors();\n\t\t\tfor (var i = 0; i < this.gameObjects.length; i++) {\n\t\t\t\tthis.gameObjects[i].update();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"addActor\",\n\t\tvalue: function addActor(actor) {\n\t\t\tthis.gameObjects.push(actor);\n\t\t}\n\t}, {\n\t\tkey: \"removeActors\",\n\t\tvalue: function removeActors() {\n\t\t\tfor (var i = 0; i < this.gameObjects.length; i++) {\n\t\t\t\tif (this.gameObjects[i].dead) {\n\t\t\t\t\tthis.gameObjects.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"render\",\n\t\tvalue: function render() {\n\t\t\tfor (var i = 0; i < this.gameObjects.length; i++) {\n\t\t\t\tthis.gameObjects[i].render();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"loop\",\n\t\tvalue: function loop() {\n\t\t\tthis.update();\n\t\t\tthis.render();\n\t\t\twindow.requestAnimationFrame(this.loop.bind(this));\n\t\t}\n\t}]);\n\treturn GameLoop;\n}();\n\nvar listeners = {};\n\nvar EventLite = function () {\n    function EventLite() {\n        classCallCheck(this, EventLite);\n    }\n\n    createClass(EventLite, null, [{\n        key: \"on\",\n        value: function on(event, handler) {\n            if (listeners[event] === undefined) {\n                listeners[event] = [handler];\n            } else {\n                listeners[event].push(handler);\n            }\n            return handler;\n        }\n    }, {\n        key: \"off\",\n        value: function off(event, handler) {\n            if (listeners[event]) {\n                for (var i = listeners[event].length - 1; i >= 0; i--) {\n                    if (listeners[event].length === 1) {\n                        delete listeners[event];\n                    } else {\n                        listeners[event].splice(i, 1);\n                        break;\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"trigger\",\n        value: function trigger(event) {\n            if (listeners[event]) {\n                for (var _len = arguments.length, data = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n                    data[_key - 1] = arguments[_key];\n                }\n\n                for (var i = listeners[event].length - 1; i >= 0; i--) {\n                    if (listeners[event] !== undefined) {\n                        if (typeof listeners[event][i] === \"function\" && listeners[event][i]) {\n                            listeners[event][i](data);\n                        } else {\n                            throw \"Event handler is not a function.\";\n                        }\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"unbindAll\",\n        value: function unbindAll() {\n            for (var event in listeners) {\n                delete listeners[event];\n            }\n            return true;\n        }\n    }]);\n    return EventLite;\n}();\n\nvar resizeId;\nvar resizeEvent;\n\nvar Screen = function () {\n    function Screen() {\n        classCallCheck(this, Screen);\n    }\n\n    createClass(Screen, null, [{\n        key: \"resize\",\n        value: function resize(e) {\n            clearTimeout(resizeId);\n            resizeEvent = e;\n            resizeId = setTimeout(Screen.recalculate, Screen.resizeDelay);\n        }\n    }, {\n        key: \"recalculate\",\n        value: function recalculate() {\n            Screen.dimensions.set(window.innerWidth, window.innerHeight);\n            if (Screen.dimensions.x > Screen.dimensions.y) {\n                Screen.orientation = \"landscape\";\n            } else {\n                Screen.orientation = \"portrait\";\n            }\n            for (var anchor in Screen.anchors) {\n                if (Screen.anchors.hasOwnProperty(anchor)) {\n                    Screen.anchorPositions[anchor].set(Screen.anchors[anchor].x * Screen.dimensions.x, Screen.anchors[anchor].y * Screen.dimensions.y);\n                }\n            }\n\n            EventLite.trigger(\"resize\", resizeEvent);\n        }\n    }, {\n        key: \"getAnchor\",\n        value: function getAnchor(name) {\n            return Screen.anchorPositions[name].get();\n        }\n    }, {\n        key: \"setAnchor\",\n        value: function setAnchor(name, ratioX, ratioY) {\n\n            if (Screen.anchors[name] == undefined) {\n                Screen.anchors[name] = new Vector3(ratioX, ratioY);\n                Screen.anchorPositions[name] = new Vector3(Screen.anchors[name].x * Screen.dimensions.x, Screen.anchors[name].y * Screen.dimensions.y);\n            } else {\n                Screen.anchors[name].set(ratioX, ratioY);\n                Screen.anchorPositions[name].set(Screen.anchors[name].x * Screen.dimensions.x, Screen.anchors[name].y * Screen.dimensions.y);\n            }\n        }\n    }, {\n        key: \"removeAnchor\",\n        value: function removeAnchor(name) {\n            delete Screen.anchors[name];\n            delete Screen.anchorPositions[name];\n        }\n    }, {\n        key: \"init\",\n        value: function init() {\n            Screen.resizeDelay = 100;\n            Screen.anchors = {};\n            Screen.anchorPositions = {};\n            Screen.dimensions = new Vector3(window.innerWidth, window.innerHeight);\n            Screen.setAnchor(\"center\", 0.5, 0.5);\n            if (Screen.dimensions.x > Screen.dimensions.y) {\n                Screen.orientation = \"landscape\";\n            } else {\n                Screen.orientation = \"portrait\";\n            }\n        }\n    }, {\n        key: \"dimensions\",\n        get: function get() {\n            return Screen._dimensions;\n        },\n        set: function set(value) {\n            if (Screen._dimensions != value) {\n                Screen._dimensions = value;\n            }\n        }\n    }, {\n        key: \"orientation\",\n        get: function get() {\n            return Screen._orientation;\n        },\n        set: function set(value) {\n            if (Screen._orientation != value) {\n                Screen._orientation = value;\n            }\n        }\n    }, {\n        key: \"center\",\n        get: function get() {\n            return Screen._center;\n        },\n        set: function set(value) {\n            if (Screen._center != value) {\n                Screen._center = value;\n            }\n        }\n    }, {\n        key: \"resizeDelay\",\n        get: function get() {\n            return Screen._resizeDelay;\n        },\n        set: function set(value) {\n            if (Screen._resizeDelay != value) {\n                Screen._resizeDelay = value;\n            }\n        }\n    }, {\n        key: \"anchors\",\n        get: function get() {\n            return Screen._anchors;\n        },\n        set: function set(value) {\n            if (Screen._anchors != value) {\n                Screen._anchors = value;\n            }\n        }\n    }, {\n        key: \"anchorPositions\",\n        get: function get() {\n            return Screen._anchorPositions;\n        },\n        set: function set(value) {\n            if (Screen._anchorPositions != value) {\n                Screen._anchorPositions = value;\n            }\n        }\n    }]);\n    return Screen;\n}();\n\nScreen.init();\n\nvar InputController = function () {\n\tfunction InputController() {\n\t\tclassCallCheck(this, InputController);\n\n\t\tthis.keyMap = {};\n\t\tthis.mousePos = new Vector3();\n\t}\n\n\tcreateClass(InputController, [{\n\t\tkey: \"bindEvents\",\n\t\tvalue: function bindEvents() {\n\t\t\tdocument.addEventListener(\"mouseup\", this.setMouseUp.bind(this));\n\t\t\tdocument.addEventListener(\"mousedown\", this.setMouseDown.bind(this));\n\t\t\tdocument.addEventListener(\"mousemove\", this.setMousePos.bind(this));\n\t\t\tonkeydown = onkeyup = this.mapKeys.bind(this);\n\t\t}\n\t}, {\n\t\tkey: \"unbindEvents\",\n\t\tvalue: function unbindEvents() {\n\t\t\tdocument.removeEventListener(\"mouseup\", this.setMouseUp.bind(this));\n\t\t\tdocument.removeEventListener(\"mousedown\", this.setMouseDown.bind(this));\n\t\t\tdocument.removeEventListener(\"mousemove\", this.setMousePos.bind(this));\n\t\t\tonkeydown = onkeyup = null;\n\t\t}\n\t}, {\n\t\tkey: \"setMousePos\",\n\t\tvalue: function setMousePos(e) {\n\t\t\tthis.mousePos.set(e.pageX, e.pageY);\n\t\t}\n\t}, {\n\t\tkey: \"setMouseUp\",\n\t\tvalue: function setMouseUp(e) {\n\t\t\tvar fakeKey = {\n\t\t\t\tkey: \"mouse\" + e.button,\n\t\t\t\ttype: \"keyup\"\n\t\t\t};\n\t\t\tthis.mapKeys(fakeKey);\n\t\t}\n\t}, {\n\t\tkey: \"setMouseDown\",\n\t\tvalue: function setMouseDown(e) {\n\t\t\tvar fakeKey = {\n\t\t\t\tkey: \"mouse\" + e.button,\n\t\t\t\ttype: \"keydown\"\n\t\t\t};\n\t\t\tthis.mapKeys(fakeKey);\n\t\t}\n\t}, {\n\t\tkey: \"mapKeys\",\n\t\tvalue: function mapKeys(e) {\n\t\t\te = e || event;\n\t\t\tthis.keyMap[e.key] = e.type == 'keydown';\n\t\t}\n\t}, {\n\t\tkey: \"keyUp\",\n\t\tvalue: function keyUp(key) {\n\t\t\tconsole.log(key);\n\t\t}\n\t}, {\n\t\tkey: \"keyDown\",\n\t\tvalue: function keyDown(key) {\n\t\t\tconsole.log(key);\n\t\t}\n\t}, {\n\t\tkey: \"setKeys\",\n\t\tvalue: function setKeys() {\n\t\t\tfor (var key in this.keyMap) {\n\t\t\t\tif (this.keyMap[key]) {\n\t\t\t\t\tthis.keyDown(key);\n\t\t\t\t} else {\n\t\t\t\t\tthis.keyUp(key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}]);\n\treturn InputController;\n}();\n\nexports.Vector2 = Vector2;\nexports.Vector3 = Vector3;\nexports.Matrix3 = Matrix3;\nexports.Matrix4 = Matrix4;\nexports.Behaviors = Behavior;\nexports.Actor = Actor;\nexports.DOMActor = DOMActor;\nexports.GameLoop = GameLoop;\nexports.Screen = Screen;\nexports.InputController = InputController;\nexports.EventLite = EventLite;\n\n}((this.Vexr = this.Vexr || {})));\n"],"file":"vexr.js"}